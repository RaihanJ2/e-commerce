from app\api\review\route.js

import Review from "@models/review";
import { connectDB } from "@utils/db";
import { getServerSession } from "next-auth";
import { authOptions } from "../auth/[...nextauth]/route";

const sessionId = async () => {
  const session = await getServerSession(authOptions);
  if (!session) {
    throw new Error("Not authenticated");
  }
  return session.user.id;
};

export const GET = async (req) => {
  try {
    await connectDB();
    const { searchParams } = new URL(req.url);
    const productId = searchParams.get("productId");

    const reviews = productId
      ? await Review.find({ productId }).populate("userId, name")
      : await Review.find().populate("userId, name");

    return new Response(JSON.stringify(reviews), { status: 200 });
  } catch (error) {
    console.error("Failed to fetch reviews", error);
    return new Response(JSON.stringify({ error: "Internal Server Error" }), {
      status: 500,
    });
  }
};

export const POST = async (req) => {
  try {
    await connectDB();
    const userId = await sessionId();
    const { productId, rating, review } = await req.json();

    const newReview = new Review({
      userId,
      productId,
      rating,
      review,
    });

    await newReview.save();
    return new Response(JSON.stringify(newReview), { status: 200 });
  } catch (error) {
    console.error("Failed to create review", error);
    return new Response(JSON.stringify({ error: "Internal Server Error" }), {
      status: 500,
    });
  }
};



from app\detail\[id]\page.jsx

"use client";
import { useEffect, useState } from "react";
import Image from "next/image";
import axios from "axios";
import Loading from "@app/loading";
import Reviews from "@components/Review";

export default function ProductDetail({ params }) {
  const { id } = params;
  const [product, setProduct] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [selectedSize, setSelectedSize] = useState("");

  useEffect(() => {
    let isMounted = true;
    const fetchProduct = async () => {
      try {
        const res = await axios.get(`/api/product/${id}`);
        if (isMounted) {
          setProduct(res.data);
          if (res.data.size.length === 1) {
            setSelectedSize(res.data.size[0]);
          }
        }
      } catch (error) {
        if (isMounted) {
          console.error("Error fetching product:", error);
        }
      }
    };
    fetchProduct();
    return () => {
      isMounted = false;
    };
  }, [id]);

  /**BUTTON HANDLER */

  const handleAddToCart = async () => {
    if (!selectedSize) {
      alert("Please select a size before adding to cart.");
      return;
    }
    try {
      await axios.post("/api/cart", {
        productId: product._id,
        name: product.name,
        size: selectedSize,
        quantity: quantity,
        images: product.images,
        price: product.price,
      });
    } catch (error) {
      console.error("Failed to add item to cart", error);
      alert("Failed to add item to cart.");
    }
  };
  const handleQuantity = (newQuantity) => {
    if (newQuantity > 0) {
      setQuantity(newQuantity);
    }
  };
  const handleSizeClick = (size) => {
    setSelectedSize(size);
  };
  const formatPrice = (price) => {
    return new Intl.NumberFormat("id-ID", {
      style: "currency",
      currency: "IDR",
    })
      .format(price)
      .replace("Rp", "Rp.");
  };
  /**LOADING */
  if (!product) {
    return <Loading />;
  }
  return (
    <>
      <section key={product.id} className="flex flex-row p-8">
        <div className="flex flex-col items-center md:flex-row gap-4">
          <Image
            src={`/${product.images}`}
            alt={product.name}
            width={500}
            height={500}
          />
          <div className="flex flex-col px-8 w-2/3 ml-10 gap-4">
            <h1 className="text-2xl font-bold">{product.name}</h1>

            {product.description.map((desc, index) => (
              <p key={index}>{desc}</p>
            ))}

            {product.size.length === 1 ? (
              <div>
                <p>Size: {product.size[0]} </p>
                <input type="hidden" value={product.size[0]} readOnly />
              </div>
            ) : (
              <div className="flex gap-2">
                {product.size.map((size, index) => (
                  <button
                    key={index}
                    onClick={() => handleSizeClick(size)}
                    className={`p-2 border rounded ${
                      selectedSize === size
                        ? "bg-black text-white"
                        : "border-black bg-white text-black"
                    }`}
                  >
                    {size}
                  </button>
                ))}
              </div>
            )}
            <div className="w-24">
              <div className="flex flex-row h-10 w-full rounded-lg relative bg-transparent mt-1">
                <button
                  onClick={() => handleQuantity(quantity - 1)}
                  data-action="decrement"
                  className="bg-gray-300 text-gray-600 hover:text-gray-700 hover:bg-gray-400 h-full w-20 rounded-l cursor-pointer outline-none "
                >
                  <span className="m-auto text-2xl font-thin">-</span>
                </button>
                <input
                  type="number"
                  className="outline-none focus:outline-none text-center w-full bg-gray-300 font-semibold text-md hover:text-black focus:text-black md:text-base cursor-default flex items-center justify-center text-gray-900  "
                  name="custom-input-number"
                  value={quantity}
                  readOnly
                />
                <button
                  onClick={() => handleQuantity(quantity + 1)}
                  data-action="increment"
                  className="bg-gray-300 text-gray-600 hover:text-gray-700 hover:bg-gray-400 h-full w-20 rounded-r cursor-pointer outline-none "
                >
                  <span className="m-auto text-2xl font-thin">+</span>
                </button>
              </div>
            </div>

            <div className="">
              <p className="my-4">{formatPrice(quantity * product.price)}</p>
              <button
                onClick={handleAddToCart}
                className=" bg-black text-white py-2 px-4 rounded"
              >
                Add to Cart
              </button>
            </div>
          </div>
        </div>
      </section>
      <Reviews productId={id} />
    </>
  );
}


from components\Review.jsx

import axios from "axios";
import React, { useEffect, useState } from "react";

const Reviews = ({ productId }) => {
  const [reviews, setReviews] = useState([]);
  const [newReview, setNewReview] = useState({ rating: 0, review: "" });

  useEffect(() => {
    const fetchReviews = async () => {
      try {
        const res = await axios.get(`/api/review?productId=${productId}`);
        setReviews(res.data);
      } catch (error) {
        console.error("Error fetching reviews:", error);
      }
    };
    fetchReviews();
  }, [productId]);

  const handleSubmit = async () => {
    e.preventDefault();
    try {
      await axios.post(`/api/review`, {
        productId,
        rating: newReview.rating,
        review: newReview.review,
      });
      setNewReview({ rating: 0, review: "" });
    } catch (error) {
      console.error("Failed to add review", error);
    }
  };

  return (
    <div>
      <h2>Reviews</h2>
      <ul>
        {reviews.map((review) => (
          <li key={review._id}>
            {review.comment} - {review.rating} stars
          </li>
        ))}
      </ul>
      <form onSubmit={handleSubmit}>
        <input
          type="number"
          value={newReview.rating}
          onChange={(e) =>
            setNewReview({ ...newReview, rating: e.target.value })
          }
          min="1"
          max="5"
          required
        />
        <textarea
          value={newReview.comment}
          onChange={(e) =>
            setNewReview({ ...newReview, comment: e.target.value })
          }
          required
        />
        <button type="submit">Submit Review</button>
      </form>
    </div>
  );
};

export default Reviews;

from models\review.js

import { Schema, model, models } from "mongoose";

const ReviewSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  productId: {
    type: Schema.Types.ObjectId,
    required: true,
    ref: "Product",
  },
  rating: {
    type: Number,
    required: true,
  },
  review: {
    type: String,
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

const Review = models.Review || model("Review", ReviewSchema);

export default Review;

from models\user.js
import { Schema, models, model } from "mongoose";

const UserSchema = new Schema(
  {
    username: {
      type: String,
      required: true,
      match: [
        /^(?=.{8,30}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._' ]+(?<![_.])$/,
        "Username invalid, it should contain 8-30 characters including alphanumeric letters, spaces, apostrophes, and be unique!",
      ],
    },
    email: {
      type: String,
      required: true,
    },
    image: {
      type: String,
    },
    address: {
      type: String,
    },
    cart: {
      type: Schema.Types.ObjectId,
      ref: "Cart",
    },
  },
  {
    timestamps: true,
  }
);

const User = models.User || model("User", UserSchema);

export default User;
